
import java.util.Scanner;

public class TICTACfinal {

    static final int SPIELER_1 = 0;
    static final int SPIELER_2 = 1;

    public static void main(String[] args) {

        // Leeres Startfeld erstellen
        Scanner scanner = new Scanner(System.in);
        String input = "         ";
        char[][] feld = compileInputToPlayfield(input);
        game(feld, scanner);
    }

    static char[][] compileInputToPlayfield(String input) {
        //String input in 2D Array setzen
        //Auf richtige Formatierung und Spaces zwischen X/O achten
        char[][] feld = {
            {input.charAt(0), input.charAt(1), input.charAt(2)},
            {input.charAt(3), input.charAt(4), input.charAt(5)},
            {input.charAt(6), input.charAt(7), input.charAt(8)}
        };
        return feld;
    }

    static void feldausgabe(char[][] feld) {
        System.out.print("---------\n| " + feld[0][0] + " " + feld[0][1] + " " + feld[0][2] + " |\n| " + feld[1][0] + " " + feld[1][1] + " " + feld[1][2] + " |\n| " + feld[2][0] + " " + feld[2][1] + " " + feld[2][2] + " |\n---------\n");
        //2D Array in richtiger Formatierung ( "X", "O", "_" und Umrandung ) ausgeben
    }

    private static String findeGewinner(char[][] feld) {
        //prüfen ob 3 "x" oder "o" hintereinander/untereinander/diagonal zueinander stehen
        boolean xxx = false;
        boolean ooo = false;

        for (int i = 0; i < 3; i++) {

            int row = 0;
            int clmn = 0;
            int mDiag = 0;
            int aDiag = 0;

            for (int j = 0; j < 3; j++) {
                row += feld[i][j];
                clmn += feld[j][i];
                mDiag += feld[j][j];
                aDiag += feld[j][2 - j];
            }
            xxx = xxx || row == 264 || clmn == 264 || mDiag == 264 || aDiag == 264;
            ooo = ooo || row == 237 || clmn == 237 || mDiag == 237 || aDiag == 237;

        }
        String returnValue;
        if (ooo) {
            returnValue = "O";
        } else if (xxx) {
            returnValue = "X";
        } else {
            returnValue = "_";
        }

        return returnValue;
    }


    /*   /**
     * 
     * @param feld
     * @return einse der folgenden werte: null (keiner gewinnt), "X", "O", "XO" (beide gewonnen, fehler!)
     */
    private static boolean istAllesBelegt(char[][] feld) {
        //püfe ob alle Felder "X" oder "O" beinhalten

        int counter_ = 0;
        boolean allesBelegt = false;
        for (int i = 0; i < feld.length; i++) {
            char[] reihe = feld[i];
            for (int j = 0; j < reihe.length; j++) {
                if (reihe[j] == '_' || reihe[j] == ' ') {
                    counter_++;
                }
            }
        }
        if (counter_ == 0) {
            allesBelegt = true;

        }
        return allesBelegt;
    }

    private static boolean naechsterSchritt(Scanner scanner, char[][] feld, char spielerToken) {
        System.out.println("Enter the coordinates: ");
        if (!scanner.hasNextInt()) {
            System.out.println("You should enter numbers!");
            scanner.next();
            return false;
        }

        int eingabeClmnV = scanner.nextInt();
        int eingabeRowV = scanner.nextInt();

        if (eingabeClmnV < 1 || eingabeClmnV > 3 || eingabeRowV < 1 || eingabeRowV > 3) {
            System.out.println("Coordinates should be from 1 to 3!");
            return false;
        }
        int eingabeClmn = eingabeClmnV - 1;
        int eingabeRow = 3 - eingabeRowV;

        if (feld[eingabeRow][eingabeClmn] != ' ') {
            System.out.println("This cell is occupied! Choose another one!");
            return false;
        }

        feld[eingabeRow][eingabeClmn] = spielerToken;
        return true;
    }

    private static void game(char[][] feld, Scanner scanner) {

        feldausgabe(feld);

        int aktiverSpieler = SPIELER_2;
        char spielerToken;

        boolean vorbei = false;
        String gewinner = null;
        while (!vorbei) {
            // wechsle spieler
            aktiverSpieler = (aktiverSpieler + 1) % 2;
            // bestimme spieler token
            if (aktiverSpieler == SPIELER_1) {
                spielerToken = 'X';
            } else {
                spielerToken = 'O';
            }
            // lasse spieler zug machen (naechsterSchritt)
            naechsterSchritt(scanner, feld, spielerToken);

            gewinner = findeGewinner(feld);
            if ("_".equals(gewinner)) { // kein gewinner
                vorbei = istAllesBelegt(feld);
            } else {
                vorbei = true;
            }

            feldausgabe(feld);
        }
        // gewinner end-sequence
        if ("_".equals(gewinner)) { // kein gewinner
            //alert user
            System.out.println("Spiel vorbei, kein Gewinner");
        } else if ("X".equals(gewinner)) {
            // alert that user x has won
            System.out.println("X Wins");
        } else { // implizit: "o".equals(gewinner)
            // alert that user o has won
            System.out.println("O Wins");
        }
    }

}
